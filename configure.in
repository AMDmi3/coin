dnl  This can be any file in the package.
AC_INIT(src/SoDB.cpp)

dnl  Locate C++ compiler and set C++ as the default compiler to run
dnl  in tests.
AC_PROG_CXX
AC_LANG_CPLUSPLUS

dnl *******************************************************************
dnl * Library version control.
dnl *******************************************************************

dnl  Making releases:
dnl    COIN_MICRO_VERSION += 1;
dnl    COIN_INTERFACE_AGE += 1;
dnl    COIN_BINARY_AGE += 1;
dnl  if any functions have been added, set COIN_INTERFACE_AGE to 0.
dnl  if backwards compatibility has been broken,
dnl  set COIN_BINARY_AGE _and_ COIN_INTERFACE_AGE to 0.
dnl 
COIN_MAJOR_VERSION=0
COIN_MINOR_VERSION=6
COIN_MICRO_VERSION=0
COIN_INTERFACE_AGE=0
COIN_BINARY_AGE=0
COIN_VERSION=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION.$COIN_MICRO_VERSION

AC_SUBST(COIN_MAJOR_VERSION)
AC_SUBST(COIN_MINOR_VERSION)
AC_SUBST(COIN_MICRO_VERSION)
AC_SUBST(COIN_VERSION)
AC_SUBST(COIN_INTERFACE_AGE)
AC_SUBST(COIN_BINARY_AGE)

dnl  libtool versioning
LT_RELEASE=$COIN_MAJOR_VERSION.$COIN_MINOR_VERSION
LT_CURRENT=`expr $COIN_MICRO_VERSION - $COIN_INTERFACE_AGE`
LT_REVISION=$COIN_INTERFACE_AGE
LT_AGE=`expr $COIN_BINARY_AGE - $COIN_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$COIN_VERSION

dnl  These are for include/Inventor/SbBasic.h.

AC_DEFINE_UNQUOTED(COIN_MAJOR_VERSION, $COIN_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(COIN_MINOR_VERSION, $COIN_MINOR_VERSION)
AC_DEFINE_UNQUOTED(COIN_MICRO_VERSION, $COIN_MICRO_VERSION)
AC_DEFINE_UNQUOTED(COIN_VERSION, "$COIN_VERSION")

dnl *******************************************************************
dnl * Miscellaneous options and initializations.
dnl *******************************************************************

AM_INIT_AUTOMAKE(libCoin, $VERSION)

dnl  File to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h include/Inventor/SbBasic.h)

dnl  Default to not building a static library.
dnl  Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

dnl  Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

dnl  Initialize libtool
AM_PROG_LIBTOOL

dnl  Yep, this is important in case we want to add code to make
dnl  the API interface "Open Inventor strict", meaning the user must
dnl  use the exact same include files as under "real" Open Inventor.
dnl  We would then need to know that we are actually allowed to include
dnl  any file during internal build.
CXXFLAGS="$CXXFLAGS -D__SOLIB_INTERNAL__"


dnl *******************************************************************
dnl * Test for installation of Mesa or OpenGL development system.
dnl *
dnl * FIXME: wrap all of this inside a "--with-rendering" or somesuch.
dnl * 19990915 mortene.
dnl *
dnl * FIXME: the MDL_HAVE_OPENGL test has _lots_ of room for improvement:
dnl * it won't work under Win32, and it unconditionally includes the
dnl * glu, glx and glut libraries if they are available. Besides, it
dnl * doesn't seem to check for a _development_ system, only the libs.
dnl * 19990915 mortene.
dnl *******************************************************************

MDL_HAVE_OPENGL

if test "x$mdl_cv_have_OpenGL" = "xno"; then
  AC_MSG_ERROR([
*** Needs an OpenGL-compatible development installation to compile!])
fi

CXXFLAGS="$CXXFLAGS $GL_CFLAGS"
LIBS="$LIBS $GL_LIBS"

dnl *******************************************************************
dnl * Enable/disable compilation with debug information.
dnl *******************************************************************

AC_ARG_ENABLE(debug,
  [  --enable-debug          turn on Coin debugging [default=yes]],
  [case "${enableval}" in
    yes) enable_debug=yes ;;
    no)  enable_debug=no ;;
    *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-debug) ;;
  esac],
  enable_debug=yes)

if test "x$enable_debug" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -DCOIN_DEBUG=1"
else
  CXXFLAGS="$CXXFLAGS -DCOIN_DEBUG=0 -DNDEBUG"
fi


dnl *******************************************************************
dnl * Enable/disable compilation with symbol information.
dnl *******************************************************************

if test "x$ac_cv_prog_cxx_g" = "xyes"; then
  AC_ARG_ENABLE(symbols,
    [  --enable-symbols        turn on symbol debug information [default=yes]],
    [case "${enableval}" in
      yes) enable_symbols=yes ;;
      no)  enable_symbols=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-symbols) ;;
    esac],
    enable_symbols=yes)

  if test "x$enable_symbols" = "xno"; then
    CXXFLAGS="`echo $CXXFLAGS | sed 's/-g//'`"
  fi
fi


dnl *******************************************************************
dnl * Enable/disable compilation with RTTI information (g++ only).
dnl *******************************************************************

if test "x$ac_cv_prog_cxx_g" = "xyes"; then
  AC_ARG_ENABLE(rtti,
    [  --enable-rtti           compile with RTTI [default=no]],
    [case "${enableval}" in
      yes) enable_rtti=yes ;;
      no)  enable_rtti=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-rtti) ;;
    esac],
    enable_rtti=no)

  if test "x$enable_rtti" = "xno"; then
    CXXFLAGS="$CXXFLAGS -fno-rtti"
  fi
fi


dnl *******************************************************************
dnl * Enable/disable compilation with exception handling (g++ only).
dnl *******************************************************************

if test "x$ac_cv_prog_cxx_g" = "xyes"; then
  AC_ARG_ENABLE(exceptions,
    [  --enable-exceptions     compile with exceptions [default=no]],
    [case "${enableval}" in
      yes) enable_exceptions=yes ;;
      no)  enable_exceptions=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-exceptions) ;;
    esac],
    enable_exceptions=no)

  if test "x$enable_exceptions" = "xno"; then
    dnl FIXME: this option was called "-fno-handle-exceptions" before g++ 2.8.
    dnl 19990924 mortene.
    CXXFLAGS="$CXXFLAGS -fno-exceptions"
  fi
fi


dnl *******************************************************************
dnl * Enable/disable compilation with profiling information
dnl * for parsing by gprof (this is a g++ only option).
dnl *******************************************************************

if test "x$ac_cv_prog_cxx_g" = "xyes"; then
  AC_ARG_ENABLE(profile,
    [  --enable-profile        turn on inclusion of profiling code [default=no]],
    [case "${enableval}" in
      yes) enable_profile=yes ;;
      no)  enable_profile=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-profile) ;;
    esac],
    enable_profile=no)

  if test "x$enable_profile" = "xyes"; then
    CXXFLAGS="$CXXFLAGS -pg"
    LDFLAGS="$LDFLAGS -pg"
  fi
fi


dnl *******************************************************************
dnl * Enable/disable compilation with warnings turned on (g++ only).
dnl *******************************************************************

if test "x$ac_cv_prog_gxx" = "xyes"; then
  AC_ARG_ENABLE(warnings,
    [  --enable-warnings       turn on warnings when compiling [default=yes]],
    [case "${enableval}" in
      yes) enable_warnings=yes ;;
      no)  enable_warnings=no ;;
      *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-warnings) ;;
    esac],
    enable_warnings=yes)

  if test "x$enable_warnings" = "xyes"; then
    CXXFLAGS="$CXXFLAGS -W -Wall"
  fi
fi


dnl *******************************************************************
dnl * Enable/disable compilation with the "incremental linking through
dnl * the use of dynamic libraries" hack.
dnl *******************************************************************

AC_ARG_ENABLE(inclink,
  [  --enable-inclink        turn on the dynalink hack [default=no]],
  [case "${enableval}" in
    yes) enable_inclink=yes ;;
    no)  enable_inclink=no ;;
    *) AC_MSG_ERROR(bad value \"${enableval}\" for --enable-inclink) ;;
  esac],
  enable_inclink=no)

AM_CONDITIONAL(HACKING_DYNAMIC_MODULES, test "x$enable_inclink" = "xyes")


dnl *******************************************************************
dnl * Check if we want to use simage (if available).
dnl *******************************************************************

AC_ARG_WITH(simage,
  [  --with-simage           use simage (if found) for texture import [default=yes]],
  [case "${withval}" in
    yes) want_simage=yes ;;
    no)  want_simage=no ;;
    *) AC_MSG_ERROR(bad value \"${withval}\" for --with-simage) ;;
  esac],
  [want_simage=yes])

dnl *******************************************************************
dnl * Check if libsimage development system is installed (if necessary).
dnl *******************************************************************

if test "x$want_simage" = "xyes"; then
  AC_CHECK_HEADER(simage.h, simage_dev=yes, simage_dev=no)
  if test "$simage_dev" = yes; then
    AC_CHECK_LIB(simage, simage_read_image, , simage_dev=no, -lz -lm)
  fi
  if test "$simage_dev" = no; then
    AC_MSG_WARN(libsimage development system not found -- no simage texture support)
  fi
fi



dnl *******************************************************************
dnl * List all files configure shall generate.
dnl *******************************************************************

AC_OUTPUT(include/Makefile include/Inventor/Makefile \
	Makefile src/Makefile \
	src/VRMLnodes/Makefile src/actions/Makefile src/bundles/Makefile \
	src/caches/Makefile src/elements/Makefile src/engines/Makefile \
	src/errors/Makefile src/events/Makefile src/fields/Makefile \
	src/misc/Makefile src/lists/Makefile src/nodekits/Makefile \
	src/nodes/Makefile src/projectors/Makefile src/sensors/Makefile \
	src/system/Makefile)
