############################################################################
#
# NAME
# Coin
# 
# MODULES
# src/general.metadon
# separator
# src/actions/actions.metadon
# src/base/base.metadon
# src/bundles/bundles.metadon
# src/caches/caches.metadon
# src/details/details.metadon
# src/draggers/draggers.metadon
# src/elements/elements.metadon
# src/engines/engines.metadon
# src/errors/errors.metadon [0.3]
# src/events/events.metadon
# src/fields/fields.metadon
# src/lists/lists.metadon
# src/manips/manips.metadon
# src/nodekits/nodekits.metadon
# src/nodes/nodes.metadon
# src/projectors/projectors.metadon
# src/sensors/sensors.metadon
#
############################################################################
#
# COMMENTS
#
# <h3>Rules For Developers (RFD)</h3>
# <ol>
# <li>
# If the code you write is not expected to work 100%;
# <ul compact>
# <li> leave a <code>FIXME</code> message if you believe the
#      code is fairly correct, but you are unsure and have not checked the
#      correctness yet (like error-catching, ambiguities in the OIV docs
#      that will require some testing, ...), or if there are known
#      deficiencies.
# <li> insert an <code>assert( FALSE )</code> if the code lacks certain
#      sections, so situations where unimplemented features are used will
#      be caught.
# </ul>
#
# A FIXME-message must include a short description of the problem, who wrote
# the message, and when.  Example:
#
# <code>
# // FIXME: this code will sometimes fail, hasn't yet determined why.<br>
# // 19990423 mortene.
# </code>
#
# This goes also for other keywords in comments (see below).  It makes it
# much easier when others try to fix code that doesn't work.  You will know
# who to ask if you don't understand the problem, and the date will indicate
# among other things the urgency of the problem.  If a FIXME-message has
# been left alone for months, it is probably not very important.
#
#
# <li>
# If blocks of code are commented out (obsoleted) to make place for new code,
# or because it has become superfluous, one should mark it like the example
# below if it is a large block of code, if the new code is very experimental,
# or if the new code is obfuscated (e.g. because of optimizations).
#
# <code>
# #if 0// OBSOLETE: <textual description>. <yymmdd userid>.<br>
# ...old code...<br>
# #else // short description of new code<br>
# ...new code...<br>
# #endif // newcode
# </code>
#
#
# <li>
# During debugging, write debug code like this:
#
# <code>
# #if 1 // debug<br>
#   SoDebugError::postInfo(...<br>
# #endif // debug
# </code>
#
# Then, flip <code>#if 1</code> to <code>#if 0</code> if there is a chance
# that the debug information might be useful later -- otherwise remove it.
# If there are many debug statements in the same category, use a define for
# that category (<code>#if DEBUG_&lt;category&gt;</code>) and define it
# to 0 at the top of the file. See <code>src/sensors/SoSensorManager.cpp</code>
# for examples.
#
#
# <li>
# Do not under any circumstances use <code>printf() / fprintf()</code> for
# output.  It should not be necessary - the Coin classes SoDebugError and
# SoReadError were implemented for a reason.  Debug messages with
# <code>printf() / fprintf()</code> is uncool when you use Windows, and besides
# it's bloody irritating to walk through the code later to remove them.
# 
#
# <li>
# Keep the Metadon development state information in the *.in files
# up-to-date during
# development.  Of course it might take a few days of work before it is any
# point in updating the development state information, but do it as soon as
# possible to minimize the chance of forgetting to do it.
#
# If you implement something and do not find any relevant place to insert
# the updated information, instead of dropping the ball; think about
# <em>why</em> you couldn't update the development state monitor system, and
# try to fix the problem.
#
#
# <li>
# Code formatting rules. The default is to use Kernighan and Ritchie style.
# <ol>
# <li>
# Braces: keep opening braces on the end of the line, and closing braces
# at the start. Like this:<br><br>
# <code>
# if (...) {<br>
#   ...<br>
# }<br>
# </code>
# And not like this:<br><br>
# <code>
# if (...)<br>
# {<br>
#   ...<br>
# }<br>
# </code>
# <br>
#
# The exception from this rule is functions, which should have the opening
# brace on the next line.
#
# <li>
# Indentation: use 2 spaces extra for each level of nesting.
#
# <li>
# Spacing: use 1 space after commas and around operators (like
# <code>+, -, *, /, ==, &&</code>, etc),
# but not after or before parentheses. Like this:<br><br>
# <code>if (val) i = sqrt(a) * func(b, c);</code><br><br>
# And not like this:<br><br>
# <code>if ( val ) i=sqrt(a)*func(b,c);</code>.
#
# <li>
# Naming: class names should be uppercased for each word, function names for
# each word except the first one, variable names should be all lowercase,
# and defines, enums and constants should be all uppercase. Example:<br><br>
# <code>
# float<br>
# MathClass::calculateValue(float in)<br>
# {<br>
#   const float FACTOR = 2.78;<br>
# ...<br>
# ...<br>
# }
# </code>
#
# </ol>
#
# </ol>
#
# END COMMENTS
#
############################################################################
